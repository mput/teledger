// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package ledger

import (
	"sync"
)

// Ensure, that TransactionGeneratorMock does implement TransactionGenerator.
// If this is not the case, regenerate this file with moq.
var _ TransactionGenerator = &TransactionGeneratorMock{}

// TransactionGeneratorMock is a mock implementation of TransactionGenerator.
//
//	func TestSomethingThatUsesTransactionGenerator(t *testing.T) {
//
//		// make and configure a mocked TransactionGenerator
//		mockedTransactionGenerator := &TransactionGeneratorMock{
//			GenerateTransactionFunc: func(promptCtx PromptCtx) (Transaction, error) {
//				panic("mock out the GenerateTransaction method")
//			},
//		}
//
//		// use mockedTransactionGenerator in code that requires TransactionGenerator
//		// and then make assertions.
//
//	}
type TransactionGeneratorMock struct {
	// GenerateTransactionFunc mocks the GenerateTransaction method.
	GenerateTransactionFunc func(promptCtx PromptCtx) (Transaction, error)

	// calls tracks calls to the methods.
	calls struct {
		// GenerateTransaction holds details about calls to the GenerateTransaction method.
		GenerateTransaction []struct {
			// PromptCtx is the promptCtx argument value.
			PromptCtx PromptCtx
		}
	}
	lockGenerateTransaction sync.RWMutex
}

// GenerateTransaction calls GenerateTransactionFunc.
func (mock *TransactionGeneratorMock) GenerateTransaction(promptCtx PromptCtx) (Transaction, error) {
	if mock.GenerateTransactionFunc == nil {
		panic("TransactionGeneratorMock.GenerateTransactionFunc: method is nil but TransactionGenerator.GenerateTransaction was just called")
	}
	callInfo := struct {
		PromptCtx PromptCtx
	}{
		PromptCtx: promptCtx,
	}
	mock.lockGenerateTransaction.Lock()
	mock.calls.GenerateTransaction = append(mock.calls.GenerateTransaction, callInfo)
	mock.lockGenerateTransaction.Unlock()
	return mock.GenerateTransactionFunc(promptCtx)
}

// GenerateTransactionCalls gets all the calls that were made to GenerateTransaction.
// Check the length with:
//
//	len(mockedTransactionGenerator.GenerateTransactionCalls())
func (mock *TransactionGeneratorMock) GenerateTransactionCalls() []struct {
	PromptCtx PromptCtx
} {
	var calls []struct {
		PromptCtx PromptCtx
	}
	mock.lockGenerateTransaction.RLock()
	calls = mock.calls.GenerateTransaction
	mock.lockGenerateTransaction.RUnlock()
	return calls
}

// ResetGenerateTransactionCalls reset all the calls that were made to GenerateTransaction.
func (mock *TransactionGeneratorMock) ResetGenerateTransactionCalls() {
	mock.lockGenerateTransaction.Lock()
	mock.calls.GenerateTransaction = nil
	mock.lockGenerateTransaction.Unlock()
}

// ResetCalls reset all the calls that were made to all mocked methods.
func (mock *TransactionGeneratorMock) ResetCalls() {
	mock.lockGenerateTransaction.Lock()
	mock.calls.GenerateTransaction = nil
	mock.lockGenerateTransaction.Unlock()
}
